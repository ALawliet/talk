#!/usr/bin/env node

/**
 * Module dependencies.
 */

const program = require('./commander');

// const CommentService = require('../services/comments');
const mongoose = require('../services/mongoose');
const util = require('./util');
const fs = require('fs');

// const CommentService = require('/services/comments');
// const UserService = require('/services/users');

const UserModel = require('../models/user');

// Register the shutdown criteria.
util.onshutdown([
  () => mongoose.disconnect()
]);

// Reads strategy file, validates it and returns an object.
function normalizeStrategy(strategy_file) {
  return new Promise((resolve, reject) => {
    fs.readFile(strategy_file, function(err, data) {
      if (err) {
        reject(err);
      }
      resolve(JSON.parse(data));
    });
  });
}

function get_value(old_comment, field) {
  let value = old_comment;
  if (field['source'].includes('.')) {
    let i = field['source'].split('.');
    for (const f of i) {
      value = value[f];
    }
  } else {
    value = old_comment[field['source']];
  }
  return value;
}

function transform_field(old_comment, field) {
  switch(field['relation']) {
  case 'Identity':
    return get_value(old_comment, field);
  case 'FindUser':

    // It needs to find a the user by the username.
    // Otherwise it will create it with the data that has available.
    return UserModel
      .findOne({
        username: get_value(old_comment, field)
      }).then((user) => {

        // if user == null {
        //   UserModel.create
        // }
        return user.id;
      });

  // case 'FindOrCreateAsset':
  // case 'Parent':
  // case 'Map':
  // case 'Array':
  // case 'Metadata'
  default:
    return '';
  }

  // comment['section'] = old_asset[fields['section']['source']];
  // for (let field in fields.metadata) {
  //   comment['metadata'][field['source']] = old_comment[field['source']];
  // }
}

function transform(old_comment, strategy) {
  let fields = strategy.fields;
  let comment = {};

  for (let field in fields) {
    comment[field] = transform_field(old_comment, fields[field]);
  }

  return new Promise((resolve) => {
    resolve(comment);
  });

  // return CommentService.publicCreate(comment)
  // .then((comment) => {
  //   return comment;
  // })
  // .catch((err) => {
  //   console.log('Failed transforming ', old_comment);
  //   console.log(err);
  //   util.shutdown(1);
  // });
}

/**
* Import comments into the database.
*/
function importComments(file) {

  // Get strategy to use.
  normalizeStrategy(file)
  .then((strategy) => new Promise((resolve, reject) => {

    console.log('Importing assets for strategy %s.', strategy.name);

    // Mongo data to import.
    let url = strategy.database;

    // Connect to the Mongo instance.
    let db = mongoose.createConnection(url);

    db.once('open', function(){
      let comments = db.collection('comments');
      let stream = comments.find().stream();

      stream.on('data', function(doc) {

        // .then((comment) => {
        //   //console.log('Imported comment %s .', comment);
        // })
        // work with the document to transform and import it
        transform(doc, strategy.map.entities.comments)
        .catch((err) => {
          console.error(err);
          util.shutdown(1);
        });
      });

      stream.on('error', (err) => {
        return reject(err);
      });

      stream.on('end', () => {
        return resolve();
      });
    });
  }))
  .then(() => {
    util.shutdown();
  })
  .catch((err) => {
    console.error(err);
    util.shutdown(1);
  });
}

//==============================================================================
// Setting up the program command line arguments.
//==============================================================================

program
  .command('import <file>')
  .description('import comments into database via strategy file')
  .action(importComments);

program.parse(process.argv);

// If there is no command listed, output help.
if (!process.argv.slice(2).length) {
  program.outputHelp();
  util.shutdown();
}
